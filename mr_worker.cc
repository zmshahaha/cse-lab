#include <iostream>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>

#include <mutex>
#include <string>
#include <vector>
#include <map>

#include "rpc.h"
#include "mr_protocol.h"

using namespace std;

struct KeyVal {
    string key;
    string val;
};

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
vector<KeyVal> Map(const string &filename, const string &content)
{
	// Copy your code from mr_sequential.cc here.
    vector<KeyVal> wordsMap;
    string tempString=content;
    
    //not a letter,change to space
    for(int i=0;i<(int)tempString.size();i++)
        if(!(tempString[i]>='a'&&tempString[i]<='z')&&!(tempString[i]>='A'&&tempString[i]<='Z'))
            tempString[i]=' ';
    
    istringstream wordsStream(tempString);
    string tempKey;
    KeyVal keyVal;

    while(wordsStream >> tempKey){
        cout<<tempKey<<endl;
        keyVal.key=tempKey;
        keyVal.val="1";
        wordsMap.push_back(keyVal);
    }

    return wordsMap;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
string Reduce(const string &key, const vector < string > &values)
{
    // Copy your code from mr_sequential.cc here.
    long out = 0;
    for(string value : values)
        out+=atol(value.c_str());
    return to_string(out);
}


typedef vector<KeyVal> (*MAPF)(const string &key, const string &value);
typedef string (*REDUCEF)(const string &key, const vector<string> &values);

class Worker {
public:
	Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf);

	void doWork();

private:
	void doMap(int index, const string &filename);
	void doReduce(int index,int mapnum);
	void doSubmit(mr_tasktype taskType, int index);

	mutex mtx;
	int id;

	rpcc *cl;
	std::string basedir;
	MAPF mapf;
	REDUCEF reducef;
};


Worker::Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf)
{
	this->basedir = dir;
	this->mapf = mf;
	this->reducef = rf;

	sockaddr_in dstsock;
	make_sockaddr(dst.c_str(), &dstsock);
	this->cl = new rpcc(dstsock);
	if (this->cl->bind() < 0) {
		printf("mr worker: call bind error\n");
	}
}

//index:map task num
//write into mr-x-y x:map task num(index) y:reduce task num
//one domap map a file to reduce_count intermediate file
//one index corresponded to one filename
//domap called count of filename times
void Worker::doMap(int index, const string &filename)
{
	// Lab2: Your code goes here.
	string content;
	getline(ifstream(filename), content, '\0');
    vector <KeyVal> KVA = Map(filename, content);

    //convert KVA to reducer_count strings(list of key val\n )
	vector <string> outStrings(REDUCER_COUNT,"");
	for(const KeyVal& keyVal : KVA){
		std::hash<std::string> hash_string;
    	int fileIndex = hash_string(keyVal.key)%REDUCER_COUNT;
		outStrings[fileIndex]+=keyVal.key+" "+keyVal.val+"\n";
	}

    //write reducer_count strings to files
	for(int j=0; j<REDUCER_COUNT; j++){
		string filenameOut=basedir+"mr-"+to_string(index)+"-"+to_string(j);
		ofstream out(filenameOut, ios::out);
		out<<outStrings[j];
		out.close();
	}
}

//index=reduce task num
//mapnum = filenum
//a doreduce reduce each file's corresponding index map result
void Worker::doReduce(int index,int mapnum)
{
	// Lab2: Your code goes here.
    
    // 
	map<string, unsigned long> kvmap;
	for(int j=0; j<mapnum; j++){
		string filename="mr-"+to_string(j)+"-"+to_string(index);
		ifstream in(filename, ios::in);
		string key, val;
		while (in>>key>>val)
			kvmap[key]+=stol(val);
		in.close();
		// cout<<"REDUCE "<<index<<" read "<<filename<<endl;
	}


	
	string outString="";
	for(const pair<string,unsigned long>& kv:kvmap)
		outString+=kv.first+" "+to_string(kv.second)+"\n";
	
	string mr_out=basedir+"mr-out-"+to_string(index);

	ofstream out(mr_out,ios::out|ios::app);
	out<<outString<<endl;
	out.close();
}

void Worker::doSubmit(mr_tasktype taskType, int index)
{
	bool b;
	mr_protocol::status ret = this->cl->call(mr_protocol::submittask, taskType, index, b);
	if (ret != mr_protocol::OK) {
		fprintf(stderr, "submit task failed\n");
		exit(-1);
	}
}

void Worker::doWork()
{
	for (;;) {
		//
		// Lab2: Your code goes here.
		// Hints: send asktask RPC call to coordinator
		// if mr_tasktype::MAP, then doMap and doSubmit
		// if mr_tasktype::REDUCE, then doReduce and doSubmit
		// if mr_tasktype::NONE, meaning currently no work is needed, then sleep
		//
		mr_protocol::AskTaskResponse res;
        cl->call(mr_protocol::asktask, id, res);

        switch (res.tasktype) {
            case MAP:
                cout << "worker: receive map task " << res.index << endl;
                doMap(res.index, res.filename);
                doSubmit(MAP, res.index);
                break;
            case REDUCE:
                cout << "worker: receive reduce task" << res.index << endl;
                doReduce(res.index, res.nfiles);
                doSubmit(REDUCE, res.index);
                break;
            case NONE:
                cout << "worker: receive no task" << endl;
                sleep(1);
                break;
        }
	}
}

int main(int argc, char **argv)
{
	if (argc != 3) {
		fprintf(stderr, "Usage: %s <coordinator_listen_port> <intermediate_file_dir> \n", argv[0]);
		exit(1);
	}

	MAPF mf = Map;
	REDUCEF rf = Reduce;
	
	Worker w(argv[1], argv[2], mf, rf);
	w.doWork();

	return 0;
}

